from __future__ import annotations

from datetime import datetime
from html import escape

from aiogram import F, Router, types
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..services.settings import SettingsService


router = Router(name="admin")


@router.message(Command("bot"))
async def cmd_bot(
    message: types.Message,
    command: CommandObject,
    settings: SettingsService,
):
    args = (command.args or "").strip().lower()
    if args == "on":
        await settings.set(message.chat.id, "is_active", True)
        return await message.reply("–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ ‚úÖ")
    elif args == "off":
        await settings.set(message.chat.id, "is_active", False)
        return await message.reply("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ ‚õî")
    elif args == "status":
        conf = await settings.get_all(message.chat.id)
        active = conf.get("is_active", True)
        prob = conf.get("interject_p", 0)
        cooldown = conf.get("interject_cooldown", 60)
        revive_enabled = conf.get("revive_enabled", False)
        revive_hours = int(conf.get("revive_after_hours", 48) or 48)
        revive_days = max(1, revive_hours // 24)
        return await message.reply(
            f"–°—Ç–∞—Ç—É—Å: {'ON' if active else 'OFF'}\n"
            "–†–µ–∞–∫—Ü–∏—è: —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {prob}%\n"
            f"–ö—É–ª–¥–∞—É–Ω: {cooldown}—Å\n"
            f"–û–∂–∏–≤–ª–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if revive_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'} (–ø–æ—Ä–æ–≥ {revive_days} –¥.)"
        )
    else:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bot on|off|status")


@router.message(Command("profanity"))
async def cmd_profanity(message: types.Message, command: CommandObject, settings: SettingsService):
    value = (command.args or "").strip().lower()
    if value not in {"off", "soft", "hard"}:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profanity <hard|soft|off>")
    await settings.set(message.chat.id, "profanity", value)
    await message.reply(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: profanity={value}")


@router.message(Command("settings"))
async def cmd_settings(message: types.Message, settings: SettingsService):
    conf = await settings.get_all(message.chat.id)
    await _send_settings(message, conf)


@router.message(Command("trigger"))
async def cmd_trigger(message: types.Message, command: CommandObject, settings: SettingsService):
    await message.reply("–ë–æ—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–¥–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


@router.message(Command("interject"))
async def cmd_interject(message: types.Message, command: CommandObject, settings: SettingsService):
    args = (command.args or "").strip().split()
    if len(args) != 2 or args[0].lower() not in {"p", "cooldown"}:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /interject p 0-100 –∏–ª–∏ /interject cooldown —Å–µ–∫—É–Ω–¥—ã", parse_mode=None)

    action = args[0].lower()
    value = args[1]
    if action == "p":
        if not value.isdigit():
            return await message.reply("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º 0-100")
        prob = int(value)
        if not 0 <= prob <= 100:
            return await message.reply("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
        await settings.set(message.chat.id, "interject_p", prob)
        return await message.reply(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ {prob}%")

    if not value.isdigit():
        return await message.reply("–ö—É–ª–¥–∞—É–Ω –∑–∞–¥–∞—ë—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º —Å–µ–∫—É–Ω–¥")
    cooldown = int(value)
    if cooldown < 10:
        return await message.reply("–ö—É–ª–¥–∞—É–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥")
    await settings.set(message.chat.id, "interject_cooldown", cooldown)
    return await message.reply(f"–ö—É–ª–¥–∞—É–Ω –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ {cooldown} —Å–µ–∫")


@router.message(Command("quiet"))
async def cmd_quiet(message: types.Message, command: CommandObject, settings: SettingsService):
    arg = (command.args or "").strip().lower()
    if not arg:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /quiet 23:00-08:00 –∏–ª–∏ /quiet off")
    if arg == "off":
        await settings.set(message.chat.id, "quiet_hours", None)
        return await message.reply("–¢–∏—Ö–∏–µ —á–∞—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    try:
        start, end = _parse_time_range(arg)
    except ValueError:
        return await message.reply("–§–æ—Ä–º–∞—Ç —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤: /quiet 23:00-08:00 –∏–ª–∏ /quiet off")

    await settings.set(message.chat.id, "quiet_hours", f"{start}-{end}")
    return await message.reply(f"–¢–∏—Ö–∏–µ —á–∞—Å—ã: {start}-{end}")


@router.message(Command("style"))
async def cmd_style(message: types.Message, command: CommandObject, settings: SettingsService):
    value = (command.args or "").strip().lower()
    allowed = {"neutral", "sarcastic", "aggressive", "dry", "friendly"}
    if value not in allowed:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /style neutral|sarcastic|aggressive|dry|friendly", parse_mode=None)
    await settings.set(message.chat.id, "style", value)
    await message.reply(f"–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: {value}")


@router.message(Command("tone"))
async def cmd_tone(message: types.Message, command: CommandObject, settings: SettingsService):
    value = (command.args or "").strip()
    if not value.isdigit():
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tone 0-10")
    tone = int(value)
    if not 0 <= tone <= 10:
        return await message.reply("–¢–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-10")
    await settings.set(message.chat.id, "tone", tone)
    await message.reply(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {tone}")


@router.message(Command("length"))
async def cmd_length(message: types.Message, command: CommandObject, settings: SettingsService):
    value = (command.args or "").strip()
    if not value.isdigit():
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /length —á–∏—Å–ª–æ_—Å–∏–º–≤–æ–ª–æ–≤")
    length = int(value)
    if length < 50 or length > 1000:
        return await message.reply("–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50-1000 —Å–∏–º–≤–æ–ª–æ–≤")
    await settings.set(message.chat.id, "max_length", length)
    await message.reply(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {length}")


@router.message(Command("context"))
async def cmd_context(message: types.Message, command: CommandObject, settings: SettingsService):
    args = (command.args or "").strip().split()
    if len(args) != 2 or args[0].lower() != "max_turns" or not args[1].isdigit():
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /context max_turns —á–∏—Å–ª–æ", parse_mode=None)
    turns = int(args[1])
    if turns < 5 or turns > 100:
        return await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 5 –∏ 100")
    await settings.set(message.chat.id, "context_max_turns", turns)
    await message.reply(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {turns} —Å–æ–æ–±—â–µ–Ω–∏–π")


def _parse_time_range(value: str) -> tuple[str, str]:
    if "-" not in value:
        raise ValueError
    start_raw, end_raw = value.split("-", 1)
    _validate_time(start_raw)
    _validate_time(end_raw)
    return start_raw, end_raw


def _validate_time(value: str) -> None:
    datetime.strptime(value, "%H:%M")


STYLE_OPTIONS = ["neutral", "sarcastic", "aggressive", "dry", "friendly"]
STYLE_LABELS = {
    "neutral": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
    "sarcastic": "—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π",
    "aggressive": "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
    "dry": "—Å—É—Ö–æ–π",
    "friendly": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
}
PROFANITY_OPTIONS = ["off", "soft", "hard"]
PROFANITY_LABELS = {
    "off": "–∑–∞–ø—Ä–µ—â–µ–Ω–∞",
    "soft": "–º—è–≥–∫–∞—è",
    "hard": "—Ä–∞–∑—Ä–µ—à–µ–Ω–∞",
}
QUIET_OPTIONS = ["off", "23:00-08:00", "00:00-06:00"]
QUIET_LABELS = {
    "off": "–Ω–µ—Ç",
    "23:00-08:00": "23:00‚Äì08:00",
    "00:00-06:00": "00:00‚Äì06:00",
}


def _render_settings(conf: dict[str, object]) -> tuple[str, InlineKeyboardMarkup]:
    active = bool(conf.get("is_active", True))
    style_raw = str(conf.get("style", "neutral"))
    style_label = STYLE_LABELS.get(style_raw, style_raw)
    profanity_raw = str(conf.get("profanity", "soft"))
    profanity_label = PROFANITY_LABELS.get(profanity_raw, profanity_raw)
    quiet_value = conf.get("quiet_hours") or "off"
    quiet_label = QUIET_LABELS.get(quiet_value, quiet_value)
    interject_p = int(conf.get("interject_p", 0) or 0)
    revive_enabled = bool(conf.get("revive_enabled", False))
    revive_hours = int(conf.get("revive_after_hours", 48) or 48)
    revive_days = max(1, revive_hours // 24)

    text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚öôÔ∏è</b>\n"
        #"<i>–ü–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ:</i>\n"
        #"‚Ä¢ üéØ –†–µ–∂–∏–º —Ä–µ–∞–∫—Ü–∏–∏\n"
        #"‚Ä¢ üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã\n"
        #"‚Ä¢ üé≠ –°—Ç–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
        #"‚Ä¢ üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –ª–µ–∫—Å–∏–∫–∏\n"
        #"‚Ä¢ üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤\n"
        #"<i>–ö—É–ª–¥–∞—É–Ω –∏ –ø—Ä–æ—á–∏–µ —Ç–æ–Ω–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</i>"
    )

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"{'üü¢ –í–∫–ª—é—á—ë–Ω' if active else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}",
        callback_data="settings:toggle:is_active",
    )
    builder.adjust(1)
    builder.button(
        text=f"üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã: {quiet_label}",
        callback_data="settings:cycle:quiet_hours",
    )
    builder.adjust(1)
    builder.button(
        text=f"üé≠ –°—Ç–∏–ª—å: {style_label}",
        callback_data="settings:cycle:style",
    )
    builder.adjust(1)
    builder.button(
        text=f"üõ°Ô∏è –ë—Ä–∞–Ω—å: {profanity_label}",
        callback_data="settings:cycle:profanity",
    )
    builder.adjust(1)
    builder.button(
        text=f"üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {interject_p}%",
        callback_data="settings:adjust:interject_p",
    )
    builder.adjust(1)
    builder.button(
        text=("üí§ –û–∂–∏–≤–ª–µ–Ω–∏–µ: –í–ö–õ" if revive_enabled else "üí§ –û–∂–∏–≤–ª–µ–Ω–∏–µ: –í–´–ö–õ"),
        callback_data="settings:toggle:revive_enabled",
    )
    builder.adjust(1)
    builder.button(
        text=f"‚è≥ –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã: {revive_days} –¥",
        callback_data="settings:adjust:revive_after_hours",
    )
    builder.adjust(1)

    return text, builder.as_markup()


async def _send_settings(message: types.Message, conf: dict[str, object]) -> None:
    text, keyboard = _render_settings(conf)
    await message.reply(text, reply_markup=keyboard)


async def _edit_settings(message: types.Message, conf: dict[str, object]) -> None:
    text, keyboard = _render_settings(conf)
    await message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("settings:"))
async def cb_settings(query: types.CallbackQuery, settings: SettingsService):
    chat_id = query.message.chat.id if query.message else None
    if chat_id is None:
        await query.answer()
        return

    parts = query.data.split(":") if query.data else []
    if len(parts) < 2:
        await query.answer()
        return

    action = parts[1]
    conf = await settings.get_all(chat_id)

    if action == "toggle" and len(parts) >= 3:
        key = parts[2]
        current = bool(conf.get(key, False))
        new_value = not current
        await settings.set(chat_id, key, new_value)
        await query.answer("–í–∫–ª—é—á–µ–Ω–æ" if new_value else "–í—ã–∫–ª—é—á–µ–Ω–æ", show_alert=False)
    elif action == "cycle" and len(parts) >= 3:
        key = parts[2]
        options = {
            "style": STYLE_OPTIONS,
            "profanity": PROFANITY_OPTIONS,
            "quiet_hours": QUIET_OPTIONS,
        }.get(key)
        if options:
            if key == "quiet_hours":
                raw_value = conf.get(key)
                current = raw_value if raw_value else "off"
            else:
                current = str(conf.get(key, options[0]))
            try:
                idx = options.index(current)
            except ValueError:
                idx = 0
            new_value = options[(idx + 1) % len(options)]
            stored = None if key == "quiet_hours" and new_value == "off" else new_value
            await settings.set(chat_id, key, stored)
            await query.answer(f"{key}: {new_value}")
    elif action == "adjust":
        if len(parts) >= 3:
            key = parts[2]
            if key == "interject_p":
                current = int(conf.get("interject_p", 0) or 0)
                if current < 5:
                    next_value = current + 1
                elif current == 5:
                    next_value = 10
                elif current < 50:
                    next_value = min(50, current + 5)
                else:
                    next_value = current + 10
                    if next_value > 100:
                        next_value = 0
                await settings.set(chat_id, "interject_p", next_value)
                await query.answer(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {next_value}%")
            elif key == "revive_after_hours":
                current_hours = int(conf.get("revive_after_hours", 48) or 48)
                current_days = max(1, current_hours // 24)
                next_days = current_days + 1 if current_days < 7 else 1
                await settings.set(chat_id, "revive_after_hours", next_days * 24)
                await query.answer(f"–ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã: {next_days} –¥")
            else:
                await query.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        else:
            await query.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
    elif action == "refresh":
        await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await query.answer()

    updated = await settings.get_all(chat_id)
    await _edit_settings(query.message, updated)
